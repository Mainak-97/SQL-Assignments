-- Assignment 3 MySQL
use mavenmovies;

-- Question 1 **Rank the customers based on the total amount they've spent on rentals.**
select c.customer_id, concat(c.first_name, ' ', c.last_name) as customer_name, sum(p.amount) as total_amount_spent
from customer c
inner join rental r on c.customer_id = r.customer_id
inner join payment p on r.rental_id = p.rental_id
group by c.customer_id
order by total_amount_spent desc;

-- question 2 **Calculate the cumulative revenue generated by each film over time.**
select film_id, film_title, payment_date, cumulative_revenue,
rank() over (partition by film_id order by cumulative_revenue desc) as revenue_rank
from (select f.film_id, f.title as film_title, p.payment_date,
sum(p.amount) over (partition by f.film_id order by p.payment_date) as cumulative_revenue
from film f join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
join payment p on r.rental_id = p.rental_id
order by f.film_id, p.payment_date) as total_part;

-- question 3 **Determine the average rental duration for each film, considering films with similar lengths.**
select film_id, title, rental_duration, avg(rental_duration) 
over (partition by rental_duration) as avg_rental_duration from film;

-- question 4 **Identify the top 3 films in each category based on their rental counts.**
select c.name as category, f.title, count(*) as rental_count from film f
inner join inventory i on f.film_id = i.film_id
inner join rental r on i.inventory_id = r.inventory_id
inner join film_category fc on fc.film_id = f.film_id
inner join category c on fc.category_id = c.category_id
group by c.name, f.title
order by rental_count desc limit 3;

-- question 5 **Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.**
select c.customer_id, concat(c.first_name, ' ', c.last_name) as full_name, count(r.rental_id) as total_rentals,
count(r.rental_id) - avg(COUNT(r.rental_id)) over () as rental_count_difference from customer c
inner join rental r on c.customer_id = r.customer_id group by c.customer_id, full_name;

-- question 6 **Find the monthly revenue trend for the entire rental store over time.**
select date_format(payment.payment_date,'%Y-%M') as month, SUM(payment.amount) as monthly_revenue
from payment group by month order by month;

-- question 7 **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
-- P.S - couldn't solve this problem statement.

-- question 8 **Calculate the running total of rentals per category, ordered by rental count.**
select c.name as category, f.title as film_title, count(r.rental_id) as rental_count, sum(count(r.rental_id)) 
over (partition by c.category_id order by count(r.rental_id) desc) as running_total
from category c
inner join film_category fc on c.category_id = fc.category_id
inner join film f on fc.film_id = f.film_id
inner join inventory i on f.film_id = i.film_id
inner join rental r on i.inventory_id = r.inventory_id
group by c.category_id, f.film_id
order by rental_count;

-- question 9 **Find the films that have been rented less than the average rental count for their respective categories.**
-- P.S - couldn't solve this problem statement.

-- question 10 **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
select date_format(payment.payment_date, '%Y-%M') as month_wise, sum(payment.amount) as revenue_each_month from payment
group by month_wise order by revenue_each_month desc limit 5;
